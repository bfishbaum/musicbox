{"version":3,"sources":["music/synth.js","features/musicnotes/musicnotesSlice.ts","features/musicnotes/Musicnotes.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","features/musicnotes/Musicnotes.module.css"],"names":["synth","PolySynth","Synth","oscillator","type","toMaster","set","PENTATONIC","notes","Array","fill","map","item","initialState","bpm","playing","currentTime","musicnotesSlice","createSlice","name","reducers","toggleNote","state","action","payload","time","value","beat","length","noteArray","filter","v","i","triggerAttackRelease","PlayNotes","setPlaying","playIntervalID","pause","clearInterval","randomize","x","y","Math","random","imFeelingLucky","restart","setBPM","share","actions","selectAll","musicnotes","toggle","j","dispatch","renderNoteSheet","note","index","Row","className","styles","ontoggle","offtoggle","onClick","redcirclebox","redcircle","renderNote","renderControls","playButtonFunction","amount","setInterval","buttonText","Button","playButton","axis","xmin","xmax","onChange","MusicNotes","useDispatch","useSelector","console","log","Container","App","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","musicnotesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.49db5f6e.chunk.js","sourcesContent":["import { PolySynth, Synth } from 'tone';\n\nconst synth = new PolySynth(4, Synth, {\n\toscillator : {\n\t\ttype : 'triangle'\n\t}\n}).toMaster();\nsynth.set('detune', -1200);\n\nconst A_MINOR_SCALE = ['A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'A5', 'B5', 'C5', 'D5', 'E5']\nconst PENTATONIC = [\n\t'C4', 'D4', 'E4', 'G4',\n\t'A4', 'C5', 'D5', 'E5',\n\t'G5', 'A5', 'C6', 'D6',\n]\n\nexport const PlayNotes = (noteArray) => {\n\tvar notes = PENTATONIC.filter((v,i) => noteArray[i])\n\tsynth.triggerAttackRelease(notes, '8n')\n}\n\nexport const TriggerAttackRelease = (note, time) => {\n\tsynth.triggerAttackRelease(note, time)\n}\n\nexport const TriggerAttack = (note, time) => {\n\tsynth.triggerAttackRelease(note, time)\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\nimport { TriggerAttackRelease, PlayNotes } from '../../music/synth.js';\r\n\r\nconst defaultBPM = 200\r\nconst defaultNotes = 16\r\nconst defaultColumns = 8\r\n\r\nexport interface MusicNoteState {\r\n  bpm: number;\r\n  notes: Array<Array<boolean>>;\r\n  playing: boolean;\r\n\tcurrentTime: number;\r\n\tplayIntervalID?: any;\r\n}\r\n\r\nexport interface TogglePayload {\r\n\t// index in the song of the note changed\r\n\ttime: number;\r\n\t// which value was toggled\r\n\tvalue: number;\r\n}\r\n\r\nvar notes = new Array(defaultNotes).fill(null).map(item =>(new Array(defaultColumns).fill(null))) \r\n\r\nconst initialState: MusicNoteState = {\r\n\tbpm: defaultBPM,\r\n\tnotes: notes,\r\n\tplaying: false,\r\n\tcurrentTime: -1\r\n};\r\n\r\n\r\nexport const musicnotesSlice = createSlice({\r\n  name: 'musicnotes',\r\n  initialState,\r\n  reducers: {\r\n       // Use the PayloadAction type to declare the contents of `action.payload`\r\n    toggleNote: (state, action: PayloadAction<TogglePayload>) => {\r\n\t\t\tstate.notes[action.payload.time][action.payload.value] = !state.notes[action.payload.time][action.payload.value]\r\n\t\t},\r\n\t\tbeat: state => {\r\n\t\t\tstate.currentTime += 1\r\n\t\t\tif(state.currentTime >= notes.length) {\r\n\t\t\t\tstate.currentTime = 0;\r\n\t\t\t}\r\n\t\t\tPlayNotes(state.notes[state.currentTime])\r\n\t\t},\r\n\t\tsetPlaying: (state, action: PayloadAction<any>) => {\r\n\t\t\tstate.playing = true\r\n\t\t\tstate.playIntervalID = action.payload\r\n\t\t},\r\n\t\tpause: state => {\r\n\t\t\tstate.playing = false\r\n\t\t\tclearInterval(state.playIntervalID)\r\n\t\t},\r\n\t\trandomize: state => {\r\n\t\t\tstate.notes = state.notes.map((x) => x.map(y => Math.random() < 0.2))\r\n\t\t},\r\n\t\timFeelingLucky: state => {\r\n\r\n\t\t},\r\n\t\trestart: state => {\r\n\t\t\tstate.currentTime = -1;\r\n\t\t},\r\n\t\tsetBPM: (state, action: PayloadAction<number>) => {\r\n\t\t\tstate.bpm = action.payload\r\n\t\t},\r\n\t\tshare: state => {\r\n\r\n\t\t},\r\n  },\r\n});\r\n\r\nexport const { toggleNote, beat, setPlaying, pause, randomize, share, restart, setBPM } = musicnotesSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n\r\nexport const selectAll = (state: RootState) =>  { return state.musicnotes }\r\n\r\nexport const play = (amount: number): AppThunk => dispatch => {\r\n\tdispatch(beat())\r\n  var x = setInterval(() => {\r\n    dispatch(beat());\r\n\t}, 60000/amount) as any;\r\n\tdispatch(setPlaying(x))\r\n};\r\n\r\n\r\nexport default musicnotesSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Slider from 'react-input-slider';\r\nimport {\r\n\tplay,\r\n\tpause,\r\n\tsetBPM,\r\n\trandomize,\r\n\trestart,\r\n\ttoggleNote,\r\n\tselectAll,\r\n\tTogglePayload,\r\n\tMusicNoteState\r\n} from './musicnotesSlice';\r\nimport {Row, Container, Button } from 'react-bootstrap';\r\nimport styles from './Musicnotes.module.css';\r\n\r\n\r\n\r\nconst toggle = (i:number,j:number, dispatch: Function  ) => () => {\r\n\tvar x : TogglePayload = {time: i, value: j}\r\n\tdispatch(toggleNote(x))\r\n}\r\n\r\nconst renderNote = (note: Array<Boolean>, index: number, dispatch: Function, time: number) => {\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t{note.map((v,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className={v ? styles.ontoggle : styles.offtoggle} onClick={toggle(index, i, dispatch)}></div>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t{time === index && \r\n\t\t\t\t<div className={styles.redcirclebox}>\r\n\t\t\t\t\t<div className={styles.redcircle}></div>\r\n\t\t\t\t</div>}\r\n\t\t</Row>\r\n\t)\r\n}\r\n\r\nconst renderNoteSheet = (state: MusicNoteState, dispatch: Function) => {\r\n\tvar notes: Array<Array<Boolean>> = state.notes\r\n\treturn (\r\n\t\t\tnotes.map((note,time) => renderNote(note, time, dispatch, state.currentTime))\r\n\t)\r\n}\r\n\r\nconst valueToNumber = (value : number | Range) => {\r\n\tif(typeof value === \"number\") {\r\n\t\treturn value\r\n\t}\r\n\treturn 200;\r\n}\r\n\r\nconst renderControls = (state: MusicNoteState, dispatch: Function) => {\r\n\tconst playButtonFunction = state.playing ? (() => dispatch(pause())) : (() => dispatch(play(state.bpm)))\r\n\tconst buttonText = state.playing ? \"Pause\" : \"Play\"\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Row>\r\n\t\t\t\t<Button className={styles.playButton} onClick={playButtonFunction}>{buttonText}</Button>\r\n\t\t\t\t<Button className={styles.playButton} onClick={() => dispatch(randomize())}>Randomize</Button>\r\n\t\t\t\t<Button className={styles.playButton} onClick={() => dispatch(restart())}>Restart</Button>\r\n\t\t\t</Row>\r\n\t\t\t<Row>\r\n\t\t\t\t<p>{state.bpm}</p>\r\n\t\t\t\t<Slider\r\n\t\t\t\t\taxis={\"x\"}\r\n\t\t\t\t\tx={state.bpm}\r\n\t\t\t\t\txmin={100}\r\n\t\t\t\t\txmax={600}\r\n\t\t\t\t\tonChange={({x}) => dispatch(setBPM(x))}/>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport function MusicNotes() {\r\n\tconst dispatch : Function = useDispatch();\r\n\tconst musicnotes = useSelector(selectAll)\r\n\tconsole.log(\"called\")\r\n  return (\r\n    <Container>\r\n\t\t\t{renderControls(musicnotes, dispatch)}\r\n\t\t\t{renderNoteSheet(musicnotes, dispatch)}\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { MusicNotes } from './features/musicnotes/Musicnotes';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\t\t\t\t<MusicNotes></MusicNotes>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport musicnotesReducer from '../features/musicnotes/musicnotesSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    musicnotes: musicnotesReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Musicnotes_value__EysYB\",\"button\":\"Musicnotes_button__2r70F\",\"slider\":\"Musicnotes_slider__3McoP\",\"textbox\":\"Musicnotes_textbox__3fUf_\",\"asyncButton\":\"Musicnotes_asyncButton__3DMCW Musicnotes_button__2r70F\",\"playButton\":\"Musicnotes_playButton__3XFBR\",\"offtoggle\":\"Musicnotes_offtoggle__3ubgJ\",\"ontoggle\":\"Musicnotes_ontoggle__An06J\",\"redcirclebox\":\"Musicnotes_redcirclebox__2xkkS\",\"redcircle\":\"Musicnotes_redcircle__2r0-g\"};"],"sourceRoot":""}