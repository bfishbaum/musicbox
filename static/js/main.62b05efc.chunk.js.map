{"version":3,"sources":["features/soundboard/Soundboard.module.css","features/counter/counterSlice.ts","music/synth.js","features/musicnotes/musicnotesSlice.ts","features/soundboard/soundboardSlice.ts","music/notesheets/piano.js","app/store.ts","serviceWorker.ts","features/musicnotes/Musicnotes.tsx","index.tsx","features/soundboard/Soundboard.tsx","features/musicnotes/Musicnotes.module.css"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","synth","PolySynth","Synth","oscillator","type","toMaster","set","PENTATONIC","notes","Array","fill","map","item","bpm","playing","currentTime","musicnotesSlice","toggleNote","time","beat","length","noteArray","filter","v","i","triggerAttackRelease","PlayNotes","setPlaying","playIntervalID","pause","clearInterval","randomize","x","y","Math","random","imFeelingLucky","restart","setBPM","share","selectAll","musicnotes","noteTime","soundboardSlice","playNote","note","toString","setNoteTime","soundboard","history","createBrowserHistory","store","configureStore","reducer","combineReducers","router","connectRouter","counter","counterReducer","musicnotesReducer","soundboardReducer","Boolean","window","location","hostname","match","toggle","j","dispatch","renderNoteSheet","index","Row","className","styles","ontoggle","offtoggle","onClick","redcirclebox","redcircle","renderNote","renderControls","playButtonFunction","amount","setInterval","buttonText","Button","playButton","href","axis","xmin","xmax","onChange","ReactDOM","render","StrictMode","noInitialPop","path","component","useDispatch","useSelector","Container","exact","soundboardState","controlPanel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62b05efc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Soundboard_value__31YCr\",\"button\":\"Soundboard_button__2abT0\",\"slider\":\"Soundboard_slider__2bPst\",\"textbox\":\"Soundboard_textbox__1orvI\",\"asyncButton\":\"Soundboard_asyncButton__AOoGg Soundboard_button__2abT0\",\"playButton\":\"Soundboard_playButton__2Mxkj\",\"offtoggle\":\"Soundboard_offtoggle__3aWRJ\",\"ontoggle\":\"Soundboard_ontoggle__1OtSP\",\"redcirclebox\":\"Soundboard_redcirclebox__YZn0i\",\"redcircle\":\"Soundboard_redcircle__1epm2\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { PolySynth, Synth } from 'tone';\n\nconst synth = new PolySynth(4, Synth, {\n\toscillator : {\n\t\ttype : 'triangle'\n\t}\n}).toMaster();\nsynth.set('detune', -1200);\n\nconst A_MINOR_SCALE = ['A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'A5', 'B5', 'C5', 'D5', 'E5']\nconst PENTATONIC = [\n\t'C4', 'D4', 'E4', 'G4',\n\t'A4', 'C5', 'D5', 'E5',\n\t'G5', 'A5', 'C6', 'D6',\n]\n\nexport const PlayNotes = (noteArray) => {\n\tvar notes = PENTATONIC.filter((v,i) => noteArray[i])\n\tsynth.triggerAttackRelease(notes, '8n')\n}\n\nexport const PlayMyNote = (note, time) => {\n\tsynth.triggerAttackRelease(note, time.toString() + 'n')\n}\n\nexport const TriggerAttackRelease = (note, time) => {\n\tsynth.triggerAttackRelease(note, time)\n}\n\nexport const TriggerAttack = (note, time) => {\n\tsynth.triggerAttackRelease(note, time)\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\nimport { TriggerAttackRelease, PlayNotes } from '../../music/synth.js';\r\n\r\nconst defaultBPM = 200\r\nconst defaultNotes = 16\r\nconst defaultColumns = 8\r\n\r\nexport interface MusicNoteState {\r\n  bpm: number;\r\n  notes: Array<Array<boolean>>;\r\n  playing: boolean;\r\n\tcurrentTime: number;\r\n\tplayIntervalID?: any;\r\n}\r\n\r\nexport interface TogglePayload {\r\n\t// index in the song of the note changed\r\n\ttime: number;\r\n\t// which value was toggled\r\n\tvalue: number;\r\n}\r\n\r\nvar notes = new Array(defaultNotes).fill(null).map(item =>(new Array(defaultColumns).fill(null))) \r\n\r\nconst initialState: MusicNoteState = {\r\n\tbpm: defaultBPM,\r\n\tnotes: notes,\r\n\tplaying: false,\r\n\tcurrentTime: -1\r\n};\r\n\r\n\r\nexport const musicnotesSlice = createSlice({\r\n  name: 'musicnotes',\r\n  initialState,\r\n  reducers: {\r\n       // Use the PayloadAction type to declare the contents of `action.payload`\r\n    toggleNote: (state, action: PayloadAction<TogglePayload>) => {\r\n\t\t\tstate.notes[action.payload.time][action.payload.value] = !state.notes[action.payload.time][action.payload.value]\r\n\t\t},\r\n\t\tbeat: state => {\r\n\t\t\tstate.currentTime += 1\r\n\t\t\tif(state.currentTime >= notes.length) {\r\n\t\t\t\tstate.currentTime = 0;\r\n\t\t\t}\r\n\t\t\tPlayNotes(state.notes[state.currentTime])\r\n\t\t},\r\n\t\tsetPlaying: (state, action: PayloadAction<any>) => {\r\n\t\t\tstate.playing = true\r\n\t\t\tstate.playIntervalID = action.payload\r\n\t\t},\r\n\t\tpause: state => {\r\n\t\t\tstate.playing = false\r\n\t\t\tclearInterval(state.playIntervalID)\r\n\t\t},\r\n\t\trandomize: state => {\r\n\t\t\tstate.notes = state.notes.map((x) => x.map(y => Math.random() < 0.2))\r\n\t\t},\r\n\t\timFeelingLucky: state => {\r\n\r\n\t\t},\r\n\t\trestart: state => {\r\n\t\t\tstate.currentTime = -1;\r\n\t\t},\r\n\t\tsetBPM: (state, action: PayloadAction<number>) => {\r\n\t\t\tstate.bpm = action.payload\r\n\t\t},\r\n\t\tshare: state => {\r\n\r\n\t\t},\r\n  },\r\n});\r\n\r\nexport const { toggleNote, beat, setPlaying, pause, randomize, share, restart, setBPM } = musicnotesSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n\r\nexport const selectAll = (state: RootState) =>  { return state.musicnotes }\r\n\r\nexport const play = (amount: number): AppThunk => dispatch => {\r\n\tdispatch(beat())\r\n  var x = setInterval(() => {\r\n    dispatch(beat());\r\n\t}, 60000/amount) as any;\r\n\tdispatch(setPlaying(x))\r\n};\r\n\r\n\r\nexport default musicnotesSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\nimport { TriggerAttackRelease, PlayNotes, PlayMyNote } from '../../music/synth.js';\r\nimport {pianoNotes} from '../../music/notesheets/piano'\r\n\r\nexport interface SoundboardState {\r\n\tnotes: Array<string>;\r\n\tnoteTime: number;\r\n}\r\n\r\nconst initialState: SoundboardState = {\r\n\tnotes: pianoNotes,\r\n\tnoteTime: 16,\r\n};\r\n\r\n\r\nexport const soundboardSlice = createSlice({\r\n  name: 'soundboard',\r\n  initialState,\r\n  reducers: {\r\n       // Use the PayloadAction type to declare the contents of `action.payload`\r\n\t\tplayNote: (state, action: PayloadAction<number>) => {\r\n\t\t\tPlayMyNote(state.notes[action.payload], state.noteTime)\r\n\t\t},\r\n\t\tsetNoteTime: (state, action: PayloadAction<number>) => {\r\n\t\t\tstate.noteTime = action.payload\r\n\t\t}\r\n  },\r\n});\r\n\r\nexport const { playNote, setNoteTime } = soundboardSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n\r\nexport const selectNotes = (state: RootState) =>  { return state.soundboard.notes }\r\nexport const selectAll = (state: RootState) =>  { return state.soundboard }\r\n\r\nexport default soundboardSlice.reducer;\r\n","const pianoNotes = [\n\t\t'A0', 'A#0', 'B0',\t\n\t\t'C1', 'C#1', 'D1', 'D#1', 'E1','F1','F#1', 'G1', 'G#1', 'A1','A#1','B1',\n\t\t'C2', 'C#2', 'D2', 'D#2', 'E2','F2','F#2', 'G2', 'G#2', 'A2','A#2','B2',\n\t\t'C3', 'C#3', 'D3', 'D#3', 'E3','F3','F#3', 'G3', 'G#3', 'A3','A#3','B3',\n\t\t'C4', 'C#4', 'D4', 'D#4', 'E4','F4','F#4', 'G4', 'G#4', 'A4','A#4','B4',\n\t\t'C5', 'C#5', 'D5', 'D#5', 'E5','F5','F#5', 'G5', 'G#5', 'A5','A#5','B5',\n\t\t'C6', 'C#6', 'D6', 'D#6', 'E6','F6','F#6', 'G6', 'G#6', 'A6','A#6','B6',\n\t\t'C7', 'C#7', 'D7', 'D#7', 'E7','F7','F#7', 'G7', 'G#7', 'A7','A#7','B7',\n\t\t'C8'\n];\nexport { pianoNotes }","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport musicnotesReducer from '../features/musicnotes/musicnotesSlice';\r\nimport soundboardReducer from '../features/soundboard/soundboardSlice';\r\nimport { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nexport const store = configureStore({\r\n  reducer: combineReducers({\r\n\t\trouter: connectRouter(history),\r\n    counter: counterReducer,\r\n    musicnotes: musicnotesReducer,\r\n    soundboard: soundboardReducer,\r\n  }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { push } from 'connected-react-router';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\nimport Slider from 'react-input-slider';\r\nimport {\r\n\tplay,\r\n\tpause,\r\n\tsetBPM,\r\n\trandomize,\r\n\trestart,\r\n\ttoggleNote,\r\n\tselectAll,\r\n\tTogglePayload,\r\n\tMusicNoteState\r\n} from './musicnotesSlice';\r\nimport {Row, Container, Button } from 'react-bootstrap';\r\nimport styles from './Musicnotes.module.css';\r\n\r\n\r\n\r\nconst toggle = (i:number,j:number, dispatch: Function  ) => () => {\r\n\tvar x : TogglePayload = {time: i, value: j}\r\n\tdispatch(toggleNote(x))\r\n}\r\n\r\nconst renderNote = (note: Array<Boolean>, index: number, dispatch: Function, time: number) => {\r\n\treturn (\r\n\t\t<Row>\r\n\t\t\t{note.map((v,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className={v ? styles.ontoggle : styles.offtoggle} onClick={toggle(index, i, dispatch)}></div>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t{time === index && \r\n\t\t\t\t<div className={styles.redcirclebox}>\r\n\t\t\t\t\t<div className={styles.redcircle}></div>\r\n\t\t\t\t</div>}\r\n\t\t</Row>\r\n\t)\r\n}\r\n\r\nconst renderNoteSheet = (state: MusicNoteState, dispatch: Function) => {\r\n\tvar notes: Array<Array<Boolean>> = state.notes\r\n\treturn (\r\n\t\t\tnotes.map((note,time) => renderNote(note, time, dispatch, state.currentTime))\r\n\t)\r\n}\r\n\r\nconst valueToNumber = (value : number | Range) => {\r\n\tif(typeof value === \"number\") {\r\n\t\treturn value\r\n\t}\r\n\treturn 200;\r\n}\r\n\r\nconst renderControls = (state: MusicNoteState, dispatch: Function) => {\r\n\tconst playButtonFunction = state.playing ? (() => dispatch(pause())) : (() => dispatch(play(state.bpm)))\r\n\tconst buttonText = state.playing ? \"Pause\" : \"Play\"\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Row>\r\n\t\t\t\t<Button className={styles.playButton} onClick={playButtonFunction}>{buttonText}</Button>\r\n\t\t\t\t<Button className={styles.playButton} onClick={() => dispatch(randomize())}>Randomize</Button>\r\n\t\t\t\t<Button className={styles.playButton} onClick={() => dispatch(restart())}>Restart</Button>\r\n\t\t\t\t<Button className={styles.playButton} onClick={() => {window.location.href = \"/soundboard\"}}>Soundboard</Button>\r\n\t\t\t</Row>\r\n\t\t\t<Row>\r\n\t\t\t\t<p>{state.bpm}</p>\r\n\t\t\t\t<Slider\r\n\t\t\t\t\taxis={\"x\"}\r\n\t\t\t\t\tx={state.bpm}\r\n\t\t\t\t\txmin={100}\r\n\t\t\t\t\txmax={600}\r\n\t\t\t\t\tonChange={({x}) => dispatch(setBPM(x))}/>\r\n\t\t\t</Row>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport function MusicNotes() {\r\n\tconst dispatch : Function = useDispatch();\r\n\tconst musicnotes = useSelector(selectAll)\r\n  return (\r\n    <Container>\r\n\t\t\t{renderControls(musicnotes, dispatch)}\r\n\t\t\t{renderNoteSheet(musicnotes, dispatch)}\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Switch } from 'react-router';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store, history } from './app/store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { MusicNotes } from './features/musicnotes/Musicnotes';\r\nimport { Soundboard } from './features/soundboard/Soundboard';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n\t\t<ConnectedRouter history={history} noInitialPop> \r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path=\"/musicbox\" component={MusicNotes} />\r\n\t\t\t\t<Route exact path=\"/soundboard\" component={Soundboard} />\r\n\t\t\t</Switch>\r\n\t\t\t</ConnectedRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Slider from 'react-input-slider';\r\nimport {\r\n\tplayNote,\r\n\tsetNoteTime,\r\n\tselectNotes,\r\n\tselectAll,\r\n\tSoundboardState\r\n} from './soundboardSlice';\r\nimport {Row, Container, Button } from 'react-bootstrap';\r\nimport styles from './Soundboard.module.css';\r\n\r\nconst renderNote = (note: string, index: number, dispatch: Function) => {\r\n\treturn (\r\n\t\t<div className={styles.offtoggle} onClick={() => dispatch(playNote(index))}>{note}</div>\r\n\t)\r\n}\r\n\r\nconst controlPanel = (noteTime: number, dispatch: Function) => {\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t<Row>\r\n\t\t\t<Button onClick={() => {window.location.href = \"/musicbox\"}}>Musicbox</Button>\r\n\t\t</Row>\r\n\t\t<p>Note Speed: {noteTime}</p>\r\n\t\t<Row>\r\n\t\t\t\t<Slider\r\n\t\t\t\t\taxis={\"x\"}\r\n\t\t\t\t\tx={noteTime}\r\n\t\t\t\t\txmin={1}\r\n\t\t\t\t\txmax={128}\r\n\t\t\t\t\tonChange={({x}) => dispatch(setNoteTime(x))}/>\r\n\t\t</Row>\r\n\t\t</div>\t\r\n\t)\r\n}\r\n\r\nexport function Soundboard() {\r\n\tconst dispatch : Function = useDispatch();\r\n\tconst soundboardState : SoundboardState = useSelector(selectAll)\r\n\r\n  return (\r\n    <Container>\r\n\t\t\t{controlPanel(soundboardState.noteTime, dispatch)}\r\n\t\t\t<Row>{soundboardState.notes.map((v,i) => renderNote(v, i, dispatch))}</Row>\r\n    </Container>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"Musicnotes_value__EysYB\",\"button\":\"Musicnotes_button__2r70F\",\"slider\":\"Musicnotes_slider__3McoP\",\"textbox\":\"Musicnotes_textbox__3fUf_\",\"asyncButton\":\"Musicnotes_asyncButton__3DMCW Musicnotes_button__2r70F\",\"playButton\":\"Musicnotes_playButton__3XFBR\",\"offtoggle\":\"Musicnotes_offtoggle__3ubgJ\",\"ontoggle\":\"Musicnotes_ontoggle__An06J\",\"redcirclebox\":\"Musicnotes_redcirclebox__2xkkS\",\"redcircle\":\"Musicnotes_redcircle__2r0-g\"};"],"sourceRoot":""}